location_query <- harris_char[1]
query_params <- list(
term = "Restaurants",
location = 77009, #It looks like I can't actually view restaurants by zip code
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_char[1]
query_params <- list(
term = "Restaurants",
location = 77027, #It looks like I can't actually view restaurants by zip code
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
rm(harris_char)
harris_zips[1]
harris_zips[1]
harris_zips[[1]]
harris_zips$zip_code[1]
harris_zips$zip_code[9]
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #It looks like I can't actually view restaurants by zip code
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
zip_demographic_data <- read_excel('zipcode_census_data.xlsx', sheet = 'nation', na = ".") %>%
rename(zip_code = Zip)
harris_data_by_zip <- inner_join(harris_zips, zip_demographic_data, by = 'zip_code')
harris_data_by_zip %>%
arrange(desc(Median)) %>%
head(15)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
length(harris_zips)
harris_data_by_zip
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50,
offset = 101
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code, location.city)
response_text
response_text
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50,
#use a while loop to break loop if less than 50 results are returned
)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
limit = 50
#use a while loop to break loop if less than 50 results are returned
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_data
response
response_text
response
response_text
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
)
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[9]
query_params <- list(
term = "Restaurants",
location = location_query #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
names(response_data)
restaurants <- flatten(response_data$businesses)
response_text
response
length(harris_data_by_zip$zip_code)
length(restaurants)
restaurants
restaurants
for(i in 1:length(harris_zips)){print(i)}
length(harris_zips)
for(i in 1:length(harris_zips$zip_code)){print(i)}
library("tidyr")
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
#THE 'TEST' FOR LOOP I'LL BE USING
restaurant_list = list()
for(i in 1:3){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
}
restaurant_list
harris_zips
query_params <- list(
term = "Restaurants",
location = 77001 #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurants
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
#THE 'TEST' FOR LOOP I'LL BE USING
restaurant_list = list()
for(i in 1:3){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
}
restaurant_list
restaurant_list
length(restaurants)
nrows(restaurants)
nrow(restaurants)
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
while(nrow(restaurants) == 50){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
}
}
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
j <- 1
while(nrow(restaurants) == 50){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = j
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
j <- j + 50
}
}
length(restaurant_list)
restaurant_list
restaurant_list
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
offset_counter <- 1
while(nrow(restaurants) == 20){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
offset_counter <- offset_counter + 20
}
}
restaurant_list
restaurant_list
restaurants
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
offset_counter <- 1
while(nrow(restaurants) >= 20){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
offset_counter <- offset_counter + 20
}
}
restaurant_list
offset_counter <- 1
while(nrow(restaurants) >= 50){
location_query <- harris_zips$zip_code[1]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
offset_counter <- offset_counter + 50
}
restaurant_list
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
offset_counter <- 1
restaurant_length <- 50
while(restaurant_length >= 50){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
restaurant_length <- nrow(restaurants)
offset_counter <- offset_counter + 50
}
}
