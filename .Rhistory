restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
offset_counter <- 1
while(nrow(restaurants) >= 20){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
offset_counter <- offset_counter + 20
}
}
restaurant_list
offset_counter <- 1
while(nrow(restaurants) >= 50){
location_query <- harris_zips$zip_code[1]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
offset_counter <- offset_counter + 50
}
restaurant_list
#THE ACTUAL FOR LOOP I'LL NEED
#for(i in 1:length(harris_zips$zip_code)){#function_body}
restaurant_list = list()
#THE 'TEST' FOR LOOP I'LL BE USING
for(i in 1:3){
offset_counter <- 1
restaurant_length <- 50
while(restaurant_length >= 50){
location_query <- harris_zips$zip_code[i]
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
#I need to find a way to add the restaurants data to some sort of database
restaurant_list[[i]] <- restaurants
restaurant_length <- nrow(restaurants)
offset_counter <- offset_counter + 50
}
}
knitr::opts_chunk$set(echo = TRUE)
location_query <- harris_zips$zip_code[77001] #queries zip code based on
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
#install.packages("jsonlite")
#install.packages("httr")
library("jsonlite")
library("httr")
library("dplyr")
library("readxl")
library("tidyr")
#make sure that source file location is the working directory
harris_zips <- read.csv('harris_zipcodes.csv')
zip_demographic_data <- read_excel('zipcode_census_data.xlsx', sheet = 'nation', na = ".") %>%
rename(zip_code = Zip)
harris_data_by_zip <- inner_join(harris_zips, zip_demographic_data, by = 'zip_code')
#some of the zip codes in harris_zips had no demographic data, so i decided to inner_join. I could left join though, if I really felt like keeping all of the restaurant data
#Loading the API key from a separate file
source("yelp_api_key.R") #allows yelp_key to be available
#make GET request, using API key as a header
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
location_query <- harris_zips$zip_code[77001] #queries zip code based on
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
location_query <- harris_zips$zip_code[77001] #queries zip code based on
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
#offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants
restaurants
location_query <- harris_zips$zip_code[1] #queries zip code based on
query_params <- list(
term = "Restaurants",
location = location_query, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
#offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% filter(name, zip_code)
restaurants %>% select(name, zip_code)
restaurants %>% select(name, location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77001, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
#offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code)
restaurants %>% select(name, location.zip_code) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
#offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% arrange(location.zip_code)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77027) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77002, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
#offset = offset_counter
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
offset = 51
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77009, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77009, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20,
offset = 61
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77027) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location == 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
query_params <- list(
term = "Restaurants",
location = 77027, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77027) %>% arrange(location.zip_code)
restaurants
query_params <- list(
term = "Restaurants",
location = 77002, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77098, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77098, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
testframe77098 <- restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77098, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 51
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
testframe77098v2 <- restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
inner_join(testframe77098, testframe77098v2)
full_join(testframe77098, testframe77098v2)
query_params <- list(
term = "Restaurants",
location = 77098, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 50,
offset = 101
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77098) %>% arrange(location.zip_code)
query_params <- list(
term = "Restaurants",
location = 77002, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
query_params <- list(
term = "Restaurants",
location = 77002, #need to find a way to iterate location query by zip
#sort_by = "rating", #this will filter out results with very few or low ratings
#use a while loop to break loop if less than 50 results are returned
limit = 20
)
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
#don't think I need this...
#names(response_data)
restaurants <- flatten(response_data$businesses)
restaurants %>% select(name, location.zip_code) %>% filter(location.zip_code == 77002) %>% arrange(location.zip_code)
anti_join(testframe77098, testframe77098v2)
#masterlist <-bind_rows(datalist)
testframe77098
testframe77098v2
#masterlist <-bind_rows(datalist)
testframe77098 %>% arrange(name)
testframe77098v2 %>% arrange(name)
inner_join(testframe77098, testframe77098v2)
harris_data_by_zip
getwd()
